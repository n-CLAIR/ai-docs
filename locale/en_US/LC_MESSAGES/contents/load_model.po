# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, NAVER
# This file is distributed under the same license as the NSML package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: NSML \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-01 09:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../contents/load_model.rst:4
msgid "Load a model in a session"
msgstr ""

#: ../../contents/load_model.rst:8
msgid ""
"NSML 라이브러리를 사용하는 코드 내에서 다른 세션의 모델을 가져올 수 있습니다. "
":ref:`nsml.load<nsml.load()>` 로 다른 세션의 모델을 불러와서 "
":ref:`nsml.save<nsml.save()>` 로 저장 후, 종료하는 더미 세션을 생성하는 방식을 사용합니다."
msgstr ""
"You can import models from other sessions within your code using the NSML library."
"It works by loading another session's model with :ref:`nsml.load<nsml.load()>` and storing "
"it with :ref:`nsml.save<nsml.save()>`, and then create a dummy session to terminate."

#: ../../contents/load_model.rst:10
msgid "baseline의 예제로 그 방법을 알아보겠습니다."
msgstr "Let's take a look at it with baseline examples."

#: ../../contents/load_model.rst:12
msgid "먼저 :ref:`nsml run<nsml run>` 명령어로 다음과 같이 실행합니다."
msgstr "First, execute the following command with the :ref:`nsml run<nsml run>` command."

#: ../../contents/load_model.rst:40
msgid ""
"새롭게 만들어진 48번 세션을 :ref:`모델리스트<nsml model ls>` 를 확인해 보면 다음과 같이 생성된 모델 목록을 "
"확인할 수 있습니다."
msgstr ""
"If you check the newly created 48th session using :ref:`model list<nsml model ls>`, "
"you can see the list of models created as follows.

#: ../../contents/load_model.rst:54
msgid ""
"baseline 코드에서 다음과 같은 :ref:`nsml.load<nsml.load()>` 함수를 호출하는 3줄의 소스코드를 "
"삽입하면 다른 세션에서 학습한 모델을 불러올 수 있습니다. 48번 세션에 있는 4번 checkpoint 모델을 가져와서 새로운 "
"세션을 만들어보겠습니다."
msgstr ""
"Let's create a new session by loading the 4th checkpoint model in the 48th session "
"using :ref:`nsml.load<nsml.load()>` function with the three lines of code."

#: ../../contents/load_model.rst:56
msgid "baseline main.py에 다음 3줄의 코드를 추가합니다."
msgstr "Add the following three lines of code to the main.py of the baseline"

#: ../../contents/load_model.rst:64
msgid ""
"체크포인트 번호, 모델을 가져올 세션 이름을 load() 함수에서 지정하고, save() 함수로 저장하는 방식입니다. 3줄의 "
"소스코드를 추가할 가장 좋은 위치는 아래와 같이 ``Trainmode = True`` 코드 밑이며 ``\"\"\" Initiate "
"RMSprop optimizer \"\"\"`` 주석 위입니다. 다른 위치에서 3줄의 소스코드를 사용하시려면 반드시 "
"nsml.bind(), 즉 bind_model(model) 함수를 사용한 다음에 삽입해야 합니다."
msgstr ""
"Specify the index of checkpoint and session name to load in load() function, and save with save() function. "
"The best position of writing the code is below of ``Trainmode = True`` as shown in the below example. "
"If you use the code at the other positions, you should insert the code after calling the bind_model(model) function."

#: ../../contents/load_model.rst:90
msgid "세션을 다시 한번 돌려보겠습니다. 49번 세션이 시작됩니다."
msgstr "Let's try to run the session again. Session 49 begins."

#: ../../contents/load_model.rst:115
msgid "로그에서 다음 문구 2개를 발견하시면 모델이 정상적으로 load되었음을 확인할 수 있습니다."
msgstr ""
"If you find the following two statements in the log, "
"you can see that the model has been loaded correctly."

#: ../../contents/load_model.rst:125
msgid "saved라는 이름의 checkpoint가 생성됩니다. nsml.save() 함수에 'saved'라는 이름을 지정했기 때문입니다."
msgstr ""
"A checkpoint named 'saved' is created. This is because "
"we named it when calling the nsml.save() function."

#: ../../contents/load_model.rst:135
msgid "다른 세션들과 같은 방법으로 nsml submit 명령어를 사용하여 모델을 리더보드에 제출할 수 있습니다."
msgstr ""
"You can submit your model to the leaderboard using the "
"nsml submit command in the same way as any other session."

