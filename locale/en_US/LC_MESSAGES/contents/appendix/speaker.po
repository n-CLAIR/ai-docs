# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, NAVER
# This file is distributed under the same license as the NSML package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: NSML \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-28 09:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../contents/appendix/speaker.rst:4
msgid "Clova speaker interworking"
msgstr ""

#: ../../contents/appendix/speaker.rst:6
msgid ""
"클로바 스피커와 연동하여 모델 생성 후 스피커를 통해 input 값에 따른 결과를 알 수 있습니다. 스피커 연동 예제는 "
":ref:`nsml infer<nsml infer>` 를 사용합니다."
msgstr ""
"After working with the Clova speaker, creating a model, you can see the "
"results based on the input value through the speaker. To explain "
"interworking, Fuse :ref:`nsml infer<nsml infer>` example. "

#: ../../contents/appendix/speaker.rst:10
msgid "순서는 다음과 같습니다."
msgstr "The order is as follows:"

#: ../../contents/appendix/speaker.rst:12
msgid "**1. Model generation and upload**"
msgstr ""

#: ../../contents/appendix/speaker.rst:14
msgid "**2. Setting speaker and CEK interworking code**"
msgstr ""

#: ../../contents/appendix/speaker.rst:16
msgid "**3. Configuration setting in web**"
msgstr ""

#: ../../contents/appendix/speaker.rst:21
msgid "1. Model generation and upload"
msgstr ""

#: ../../contents/appendix/speaker.rst:32
msgid "input값은 사용자가 스피커를 통해 실제 전달하는 값입니다."
msgstr "Input value is the actual value that the user passes through the speaker."

#: ../../contents/appendix/speaker.rst:34
msgid "input값이 2개일 때 첫번째 input 값은 base64로 인코딩 되어있는 형태로 받아지므로 decoding 후 사용해야 합니다."
msgstr ""
"When there are two input values, the first input value is received in the"
" form encoded in base64, so use it after decoding."

#: ../../contents/appendix/speaker.rst:36
msgid "위의 예제는 2개의 input 값이 곱해진 후 return되는 방식입니다. return값이 실제 스피커에서 출력됩니다."
msgstr ""
"The above example is how two input values are multiplied and then "
"returned. The return value is actually output to the speaker."

#: ../../contents/appendix/speaker.rst:40
msgid "speaker tutorial은 총 두 가지 예제로 구성되었습니다."
msgstr "Speaker tutorial consists of two examples."

#: ../../contents/appendix/speaker.rst:42
msgid "**(1) multiplication.py**"
msgstr ""

#: ../../contents/appendix/speaker.rst:44
msgid "input 2개를 받아서 곱해줍니다."
msgstr "Take two inputs and multiply them."

#: ../../contents/appendix/speaker.rst:46
msgid "**(2) hospital.py**"
msgstr ""

#: ../../contents/appendix/speaker.rst:48
msgid "서울의 종합병원 정보를 조회해주는 예제입니다. 사용자는 구, 동을 선택한 뒤 원하는 정보를 조회할 수 있습니다."
msgstr ""
"This is an example of looking up information about general hospitals in "
"Seoul. Users can select a borough & dong, and then query the information "
"they want."

#: ../../contents/appendix/speaker.rst:50
msgid ""
"Multi-turn 대화 수행을 위해 리스트에 구, 동, 병원명, 조회 정보를 담아놓고, json 데이터에서 그에 따른 value "
"값을 조회하여 return 합니다. 정보를 다시 조회하기 위해서 list를 비우고 다시 정보를 쌓는 방식으로 작동합니다."
msgstr ""
"To conduct a Multi-turn conversation, put the borough, dong, Hospital "
"name, and lookup information in the list, and check the value in the json"
" data to return. It works by emptying the list and stacking the "
"information again to retrieve the information."

#: ../../contents/appendix/speaker.rst:52
msgid ""
"위의 코드는 모두 `nsml > example <https://oss.navercorp.com/nsml/nsml_CEK>`_ "
"폴더에서 확인 가능합니다."
msgstr ""
"The above code can be found in folder `nsml > example "
"<https://oss.navercorp.com/nsml/nsml_CEK>`_ ."

#: ../../contents/appendix/speaker.rst:59
msgid "2. Setting speaker and CEK interworking code"
msgstr ""

#: ../../contents/appendix/speaker.rst:61
msgid ""
"https://developers.naver.com/console/clova/cek/#/list 에서 사용자 발화들을 모두 "
"slot값들로 세팅합니다."
msgstr ""
"Set all users' utterance to the slot values in "
"https://developers.naver.com/console/clova/cek/#/list."

#: ../../contents/appendix/speaker.rst:63
msgid ""
"web에서 받아온 session, checkpoint 데이터와 예제 부분에서 생성된 args를 `dev.apis.naver.com "
"<https://dev.apis.naver.com/nsml_/infer/local>`_ 로 전달해줍니다."
msgstr ""
"Pass the session, checkpoint data, and args generated in the example "
"section from web to `dev.apis.naver.com "
"<https://dev.apis.naver.com/nsml_/infer/local>`"

#: ../../contents/appendix/speaker.rst:65
msgid "url 주소는 변경 가능합니다."
msgstr "URL address is changeable. "

#: ../../contents/appendix/speaker.rst:67
msgid "args는 입력 데이터의 개수에 따라 달라집니다. intentRequest 부분에서 각 모델의 args를 설정합니다."
msgstr ""
"Args depends on the number of input data. Under intentRequest, set args "
"for each model."

#: ../../contents/appendix/speaker.rst:69
msgid "input 값이 1개일 때 : `['nsml.infer(input=\"base64,${input_data}\")']`"
msgstr ""
"When the input value is 1 : "
"`['nsml.infer(input=\"base64,${input_data}\")']`"

#: ../../contents/appendix/speaker.rst:71
msgid ""
"input 값이 2개일 때 : `['nsml.infer(input=\"base64,${input_data}\", "
"input2=\"${val2.value}\"]`"
msgstr ""
"When there are two input values : `['nsml.infer(input=\"base64,${input_data}\", "
"input2=\"${val2.value}\"]`"

#: ../../contents/appendix/speaker.rst:90
msgid "모델 inference하여 결과값을 받아오기 위해 start function을 실행합니다."
msgstr "Run start function to obtain the result by inferencing the model."

#: ../../contents/appendix/speaker.rst:107
msgid "임시파일에 저장된 데이터들을 가져오고 각각 시작 발화, 세션명, 모델번호로 저장하여 값들을 return합니다."
msgstr ""
"Import the data stored in the temporary file and store it with the start "
"utterance, session name, and model number respectively to return the "
"values."

#: ../../contents/appendix/speaker.rst:138
msgid "받아온 정보들과 설정된 args를 url로 전달합니다."
msgstr "Pass the information received and the set args to url."

#: ../../contents/appendix/speaker.rst:157
msgid ""
"`intenteRequest` 부분에서 스피커와 NSML의 연동 코드를 작성합니다. input값의 개수에 맞게 args를 설정해주고"
" start 함수를 실행시킨 후 받아온 값을 return해줍니다."
msgstr ""
"In part `intenteRequest`, write the interworking code between the speaker"
" and NSML. Set args according to the number of input values, and execute "
"the start function and return the received values."

#: ../../contents/appendix/speaker.rst:159
msgid ""
"스피커가 중간에 끊기지 않고 multi-turn 대화 수행을 하기 위해선 `intentRequest` 부분에  "
"`cekResponse.setMultiturn({ intent: 'playGameIntent' })` 코드를 삽입해야 합니다."
msgstr ""
"In order to carry out a multi-turn conversation without interrupting the speaker, you must insert the `cekResponse.setMultiturn({ intent: 'playGameIntent' })` code into part `intentRequest` ."

#: ../../contents/appendix/speaker.rst:166
msgid "3. Configuration setting in web"
msgstr ""

#: ../../contents/appendix/speaker.rst:170
msgid ""
"https://config.nsml.navercorp.com:10107/ 페이지에서 NSML에서 생성한 모델의 `세션명, 체크포인트"
" 번호` 와 스피커 실행 시 나오게 되는 `시작 발화` 를 입력해주셔야 합니다."
msgstr ""
"On page https://config.nsml.navercorp.com:10107/, you must enter the "
"'Session Name, Checkpoint Number' of the model generated by NSML and "
"'Start utterance' of the speaker."

#: ../../contents/appendix/speaker.rst:172
msgid "`시작 발화` 는 사용자가 어떤 입력값을 말해야 하는지를 나타내줄 수 있도록 설정해줍니다."
msgstr "`Start utterance` sets the user to indicate which input value to say."

#: ../../contents/appendix/speaker.rst:174
msgid "Ex) 곱셈 모델입니다. 몇 곱하기 몇 형태로 말씀해주세요, 서울시 종합병원 정보조회 모델입니다. 원하는 구를 말씀해주세요."
msgstr ""
"Ex) The multiplication model. Please tell me in how many times as many "
"forms, it's the model of Seoul General Hospital Information Retrieval. "
"Tell me desired borough. "

#: ../../contents/appendix/speaker.rst:188
msgid "스피커 테스트:"
msgstr "Speaker test:"

#: ../../contents/appendix/speaker.rst:179
msgid ""
"현재 예제의 호출어는 \"인퍼마법사\"입니다. "
"https://developers.naver.com/console/clova/cek/#/list 에서 호출어를 설정해 주신 후 "
"\"[호출어이름] 시작해줘\"라고 말씀하시면 시작 발화가 출력됩니다."
msgstr ""
"The current pager name for the example is \"Infer mabubsa\".Set the pager"
" at https://developers.naver.com/console/clova/cek/#/list and say "
"\"[Pager Name] Si-jak-hae-joe\", and the start utterance will be "
"displayed."

#: ../../contents/appendix/speaker.rst:181
msgid "종료 시에는 \"종료\"라고 말씀하시면 스피커가 종료됩니다."
msgstr "When you want to shutdown, speak \"Jongryo\". "

#: ../../contents/appendix/speaker.rst:191
msgid "Troubleshooting"
msgstr ""

#: ../../contents/appendix/speaker.rst:193
msgid ""
"스피커와 연동 후 실행 시 여러 이유로 작동이 원활하게 되지 않을 수 있습니다. 아래의 사항들을 확인하셔서 문제 해결을 할 수 "
"있습니다."
msgstr ""
"Running after interworking with speakers may not work well for a number of reasons. You can resolve the problem by checking the following points:

#: ../../contents/appendix/speaker.rst:195
msgid "설정되어있는 스피커 호출어를 확인해주세요."
msgstr "Please check the set speaker pager."

#: ../../contents/appendix/speaker.rst:197
msgid "초기 발화만 나오고 이후 응답이 없다면 inference 서버의 문제일 가능성이 있습니다."
msgstr "If only the initial utterance occurs and there is no subsequent response, it may be an interface server issue."

#: ../../contents/appendix/speaker.rst:199
msgid "모델 inference시에 session 생성까지 시간이 오래걸려 값이 return 되기도 전에 스피커가 종료될 수 있습니다."
msgstr "It takes a long time to create a session at the model reference, so the speaker may shut down before the value is returned."

#: ../../contents/appendix/speaker.rst:201
msgid "스피커 꺼진 후 재실행하여 해결"
msgstr "Resolve problem by turning off and re-run speaker"

#: ../../contents/appendix/speaker.rst:203
msgid "스피커 실행되자마자 inference를 하여 세션 생성 시간을 줄입니다."
msgstr "Inference as soon as the speaker is running to reduce session creation time."

#: ../../contents/appendix/speaker.rst:230
msgid "사용자 발화 인식 에러 문제"
msgstr "User utterance Recognition Error Problem"

#: ../../contents/appendix/speaker.rst:232
msgid ""
"https://developers.naver.com/console/clova/cek/#/list에서 Interaction model"
" 생성 시 유사발음을 미리 정의해주세요."
msgstr ""
"Define a similar pronunciation in advance when creating an interaction model in https://developers.naver.com/console/clova/cek/#/list."

#: ../../contents/appendix/speaker.rst:234
msgid "ex) 입원실 수 -> 이번 실수, 입원 실 수"
msgstr "ex) Number of rooms in the hospital -> i-byun silsoo, ip-won silsu"

#~ msgid ""
#~ "위의 코드는 모두 https://oss.navercorp.com/nsml/nsml_CEK"
#~ " 의 `nsml > example` 폴더에서 확인 "
#~ "가능합니다."
#~ msgstr ""

#~ msgid "2. 스피커 세팅"
#~ msgstr ""

#~ msgid ""
#~ "https://developers.naver.com/console/clova/cek/#/list 에서 "
#~ "사용자 발화들을 모두 slot값들로 세팅"
#~ msgstr ""

#~ msgid ""
#~ "webpage에서 받아온 Session, Checkpoint 데이터와 "
#~ "예제 부분에서 생성된args를 "
#~ "https://dev.apis.naver.com/nsml_/infer/local 로 전달해줍니다."
#~ msgstr ""

#~ msgid "*** url 주소는 변경 가능"
#~ msgstr ""

#~ msgid "args 는 입력데이터의 개수에 따라 달라지게 됩니다. intentRequest 부분에서 각 모델에서 args를 설정해줍니다."
#~ msgstr ""

#~ msgid "input값이 1개일때 : `['nsml.infer(input=\"base64,${input_data}\")']`"
#~ msgstr ""

#~ msgid ""
#~ "input값이 2개일때 : "
#~ "`['nsml.infer(input=\"base64,${input_data}\", "
#~ "input2=\"${val2.value}\"]`"
#~ msgstr ""

#~ msgid ""
#~ "`intenteRequest` 부분에서 스피커와 nsml의 연동 코드를"
#~ " 작성합니다. input값의 개수에 맞게 args를 설정해주고"
#~ " start함수를 실행시킨 후 받아온 값을 return해줍니다."
#~ msgstr ""

#~ msgid ""
#~ "스피커가 중간에 끊기지 않고 multi-turn 대화 "
#~ "수행을 하기 위해 `intentRequest` 부분에  "
#~ "`cekResponse.setMultiturn({ intent: 'playGameIntent' "
#~ "})` 코드 삽입해주어야 합니다."
#~ msgstr ""

#~ msgid "3. 웹 인포 설정"
#~ msgstr ""

#~ msgid "`시작발화` 는 사용자가 어떤 입력값을 말해주어야 하는지를 나타내줄 수 있도록 설정해줍니다."
#~ msgstr ""

#~ msgid ""
#~ "현재 예제의 호출어는 '인퍼마법사'입니다. "
#~ "https://developers.naver.com/console/clova/cek/#/list 에서 "
#~ "호출어를 설정해 주신 후 '[호출어이름] 시작해줘'라고 "
#~ "말씀하시면 시작 발화가 출력됩니다."
#~ msgstr ""

#~ msgid "종료 시에는 '종료'라고 말씀하시면 스피커가 종료됩니다."
#~ msgstr ""

#~ msgid "Model generation and upload"
#~ msgstr ""

#~ msgid "![dd](/Users/user/Desktop/스크린샷 2019-02-27 오후 3.08.16.png)"
#~ msgstr ""

#~ msgid "cek 연동 에러시 대처"
#~ msgstr ""

#~ msgid "호출어확인"
#~ msgstr ""

#~ msgid "멀티턴 세팅"
#~ msgstr ""

#~ msgid "Url 변경"
#~ msgstr ""

#~ msgid ""
#~ "주의사항 : 모델 inference시에 session 생성까지 "
#~ "시간이 오래걸려 그 사이 스피커가 꺼질 수 "
#~ "있습니다. 꺼진 후 다시 실행 하면 원활하게 사용할"
#~ " 수 있습니다."
#~ msgstr ""
